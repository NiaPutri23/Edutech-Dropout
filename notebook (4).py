# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hn-ErLwBOKpqjvLconYRAnL_EfJ3esm7

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Illinia Malika Putri
- Email:a001xbm223@devacademy.id
- Id Dicoding:A001XBM223

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder, OrdinalEncoder, OneHotEncoder
import numpy as np
from sklearn.feature_selection import VarianceThreshold, SelectKBest, f_classif
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE

from sqlalchemy import create_engine
import joblib

"""### Loading Data"""

df = pd.read_csv('data.csv', encoding='utf-8-sig', sep=';')

"""## Data Understanding"""

df.shape

"""terdapat 37 kolom dan 4.424 baris data"""

df.head()

df.describe()

df.info()

"""terlihat bahwa object hanya ada 1 yaitu Status yang mana merupakan variabel target dan sisanya adalah variabel yang sudah diencode sehingga menjadi numerik."""

df.isnull().sum()

"""tidak ada data kosong"""

numeric_cols = df.select_dtypes(include=['int64', 'float64'])

numeric_cols

"""Cek semua kolom"""

df.columns

plt.figure(figsize=(40,40))
sns.heatmap(numeric_cols.corr(), annot=True)
plt.title('Correlation Matrix')
plt.show()

"""Terdapat beberapa variabel yang sangat berkorelasi seperti:
- fathers occupation dan mothers occupation - 0.91
- international dan nationality - 0.79
- Curricular units 1st sem (credited) dan Curricular units 1st sem (enrolled) - 0.77
- Curricular units 1st sem (credited) dan Curricular units 2nd sem (credited) - 0.94
- Curricular units 1st sem (enrolled) dan Curricular units 2nd sem (enrolled) - 0.94
- Curricular units 1st sem (approved) dan Curricular units 2nd sem (approved) - 0.9
- Curricular units 1st sem (grade) dan Curricular units 2nd sem (grade) - 0.

Namun jika menggunakan tree-based model, korelasi tidak terlalu bermasalah.
"""

df.duplicated().sum()

"""tidak ada duplikasi data"""

df['Status'].unique()

"""terdapat 3 kelas untuk status, yaitu dropout, graduate, dan enrolled. Pada case ini kita ingin memfokuskan ke dropout atau tidaknya. Sehingga kelas akan disederhanakan menjadi dropout/non-dropout

Melihat distribusi data
"""

sns.countplot(x='Status', data=df)
plt.title('Distribusi Status Siswa')
plt.show()

"""Jika graduate dan enrolled digabung maka akan adanya imbalance data.

## Data Preparation / Preprocessing

Menggabungkan graduate dan enrolled jadi satu kelas: non-dropout
"""

df['Status'] = df['Status'].replace({'Graduate': 'No Dropout', 'Enrolled': 'No Dropout'})

"""Label encode variabel 'Status'"""

le = LabelEncoder()
df['Status'] = le.fit_transform(df['Status'])

URL = "postgresql://postgres.fovxebweiqhgwgoadqwi:supabasedb123@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres"
engine = create_engine(URL)
df.to_sql('student', engine, index=False, if_exists='replace')

"""Melihat korelasi tiap variabel terhadap Status"""

corr = df.corr(numeric_only=True)['Status'].sort_values(key=abs, ascending=False)
print(corr)

"""Memisahkan fitur dan target"""

X = df.drop('Status', axis=1)
y = df['Status']

"""Mengatasi imbalance data"""

smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X, y)

"""Split data menjadi train dan test"""

X_train, X_test, y_train, y_test = train_test_split(
    X_res, y_res, test_size=0.2, stratify=y_res, random_state=42
)

"""Simpan dataset hasil cleaning"""

df.to_csv('data_clean.csv', index=False)

"""## Modeling

Menggunakan random forest untuk mencari tingkat kepentingan fitur terhadap dropout

Membuat model dan melatih data
"""

model = RandomForestClassifier(random_state=42, class_weight='balanced')
model.fit(X_train, y_train)

"""Visualisasi feature importance"""

importances = pd.Series(model.feature_importances_, index=X.columns)
importances.sort_values(ascending=True).plot(kind='barh', figsize=(10, 8), title='Feature Importance terhadap Dropout')

feature_importance = pd.Series(model.feature_importances_, index=X.columns)
top_features = feature_importance.sort_values(ascending=False).head(10)
print(top_features)

"""## Evaluation"""

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

"""Simpan model dan kolom ke file"""

joblib.dump(model, 'model_dropout.pkl')